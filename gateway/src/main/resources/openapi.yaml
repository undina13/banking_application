openapi: 3.0.1
info:
  title: Gateway
  description: Gateway application
  contact:
    name: undina
    email: foxundina@gmail.com
  version: 1.0.0
servers:
  - url: http://localhost:8089
    description: Generated server url
tags:
  - name: GatewayController
    description: Контроллер GatewayController
paths:
  /gateway/application/offer:
    put:
      tags:
        - GatewayApplicationController
      summary: Выбор одного из предложений. Request LoanOfferDTO
      operationId: applyLoanOffer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoanOfferDTO'
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Ошибка
          content: {}
  /gateway/application:
    post:
      tags:
        - GatewayApplicationController
      summary: Создание application и client, получение 4 кредитных предложений
      operationId: createApplication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoanApplicationRequestDTO'
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Ошибка валидации
          content: {}
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /gateway/deal/calculate/{applicationId}:
    put:
      tags:
        - GatewayDealController
      summary: Завершение регистрации + полный подсчёт кредита
      operationId: getCalculation
      parameters:
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FinishRegistrationRequestDTO'
        required: true
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Отказано в кредите
          content: {}
  /gateway/deal/document/{applicationId}/sign:
    post:
      tags:
        - GatewayDealController
      summary: Запрос на подписание документов
      operationId: signDocuments
      parameters:
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /gateway/deal/document/{applicationId}/code:
    post:
      tags:
        - GatewayDealController
      summary: Подписание документов
      operationId: codeDocuments
      parameters:
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: integer
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /gateway/deal/document/{applicationId}/send:
    post:
      tags:
        - GatewayDealController
      summary: Запрос на отправку документов
      operationId: sendDocuments
      parameters:
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /gateway/admin/application/{applicationId}:
    get:
      tags:
        - GatewayAdminController
      summary: Получить заявку по id
      operationId: getApplication
      parameters:
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/ApplicationDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /gateway/admin/application:
    get:
      tags:
        - GatewayAdminController
      summary: Получить все заявки
      operationId: getAllApplications
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApplicationDTO'
        '400':
          description: Bad Request
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
    LoanOfferDTO:
      type: object
      properties:
        applicationId:
          type: integer
          format: int64
        requestedAmount:
          type: number
        totalAmount:
          type: number
        term:
          type: integer
          format: int32
        monthlyPayment:
          type: number
        rate:
          type: number
        isInsuranceEnabled:
          type: boolean
        isSalaryClient:
          type: boolean
    EmploymentDTO:
      required:
        - employerINN
        - employmentStatus
        - position
        - salary
        - workExperienceCurrent
        - workExperienceTotal
      type: object
      properties:
        employmentStatus:
          type: string
          enum:
            - UNEMPLOYED
            - SELF_EMPLOYED
            - BUSINESS_OWNER
            - EMPLOYEE
        employerINN:
          type: string
        salary:
          type: number
        position:
          type: string
          enum:
            - MIDDLE_MANAGER
            - TOP_MANAGER
            - MANAGER
        workExperienceTotal:
          type: integer
          format: int32
        workExperienceCurrent:
          type: integer
          format: int32
    FinishRegistrationRequestDTO:
      type: object
      properties:
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
            - NON_BINARY
        maritalStatus:
          type: string
          enum:
            - MARRIED
            - DIVORCED
            - NOT_MARRIED
        dependentAmount:
          type: integer
          format: int32
        passportIssueDate:
          type: string
          format: date
        passportIssueBranch:
          type: string
        employment:
          $ref: '#/components/schemas/EmploymentDTO'
        account:
          type: string
    LoanApplicationRequestDTO:
      required:
        - amount
        - birthdate
        - email
        - firstName
        - lastName
        - passportNumber
        - passportSeries
        - term
      type: object
      properties:
        amount:
          minimum: 10000
          exclusiveMinimum: false
          type: number
        term:
          minimum: 6
          type: integer
          format: int32
        firstName:
          pattern: ^[a-zA-Z]{2,30}$
          type: string
        lastName:
          pattern: ^[a-zA-Z]{2,30}$
          type: string
        middleName:
          pattern: ^[a-zA-Z]{2,30}$
          type: string
        email:
          pattern: ^[\w\.]{2,50}@[\w\.]{2,20}$
          type: string
        birthdate:
          type: string
          format: date
        passportSeries:
          pattern: ^[0-9]{4}$
          type: string
        passportNumber:
          pattern: ^[0-9]{6}$
          type: string
    CreditDTO:
      type: object
      properties:
        amount:
          type: number
        term:
          type: integer
          format: int32
        monthlyPayment:
          type: number
        rate:
          type: number
        psk:
          type: number
        isInsuranceEnabled:
          type: boolean
        isSalaryClient:
          type: boolean
        paymentSchedule:
          type: array
          items:
            $ref: '#/components/schemas/PaymentScheduleElementDTO'
    PaymentScheduleElementDTO:
      type: object
      properties:
        number:
          type: integer
          format: int32
        date:
          type: string
          format: date
        totalPayment:
          type: number
        interestPayment:
          type: number
        debtPayment:
          type: number
        remainingDebt:
          type: number
    StatusHistoryDTO:
      type: object
      properties:
        status:
          type: string
        time:
          type: string
        changeType:
          type: string
          enum:
            - AUTOMATIC
            - MANUAL
    PassportDTO:
      required:
        - series
        - number
        - issueBranch
        - issueDate
      type: object
      properties:
        series:
          type: string
        number:
          type: string
        issueBranch:
          type: string
        issueDate:
          type: string
    ClientDTO:
      type: object
      required:
        - clientId
        - lastName
        - firstName
        - middleName
        - date
        - email
        - gender
        - maritalStatus
        - dependentAmount
        - passport
        - employment
        - account
      properties:
        clientId:
          type: integer
          format: int64
        lastName:
          type: string
        firstName:
          type: string
        middleName:
          type: string
        date:
          type: string
          format: date
        email:
          type: string
        gender:
          type: string
          enum:
            - MALE
            - FEMALE
            - NON_BINARY
        maritalStatus:
          type: string
          enum:
            - MARRIED
            - DIVORCED
            - NOT_MARRIED
        dependentAmount:
          type: integer
        passport:
          $ref: '#/components/schemas/PassportDTO'
        employment:
          $ref: '#/components/schemas/EmploymentDTO'
        account:
          type: string
    ApplicationDTO:
      type: object
      required:
        - applicationId
        - client
        - credit
        - status
        - creationDate
        - appliedOffer
        - signDate
        - sesCode
        - statusHistory
      properties:
        applicationId:
          type: integer
          format: int64
        client:
          $ref: '#/components/schemas/ClientDTO'
        credit:
          $ref: '#/components/schemas/CreditDTO'
        status:
          type: string
        creationDate:
          type: string
        appliedOffer:
          $ref: '#/components/schemas/LoanOfferDTO'
        signDate:
          type: string
        sesCode:
          type: string
        statusHistory:
          type: array
          items:
            $ref: '#/components/schemas/StatusHistoryDTO'